C51 COMPILER V9.53.0.0   TIMER                                                             07/22/2020 03:02:18 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\timer.obj
COMPILER INVOKED BY: F:\MDK5\C51\BIN\C51.EXE ..\hardware\timer\timer.c LARGE OMF2 OPTIMIZE(2,SPEED) BROWSE INCDIR(..\har
                    -dware\delay;..\hardware\IIC;..\hardware\OLED;..\hardware\ADC;..\hardware\Mpu6050;..\hardware\KEY;..\hardware\LED;..\hard
                    -ware\PWM;..\hardware\pca;..\hardware\timer;..\hardware\PID;..\hardware\CCD;..\hardware\UART) DEBUG PRINT(.\timer.lst) TA
                    -BS(3) OBJECT(.\timer.obj)

line level    source

   1          #include "timer.h"
   2          
   3          int flag = 0;
   4          u8 busy[5];
   5          
   6          void Timer_uart_init() //串口中断初始化
   7          {
   8   1         SCON |= 0x50;                            //REN=1允许串行接受状态，串口工作模式2
   9   1         TMOD |= 0x00;                            //定时器1为模式0（16位自动重载）
  10   1         AUXR = 0X40;                             //开启1T模式`    PS：这一行不能或等于不然串口无法打开
  11   1         TL1 = (65535 - (24000000 / 4 / 115200)); //设置波特率重装值
  12   1         TH1 = (65535 - (24000000 / 4 / 115200)) >> 8;
  13   1         TR1 = 1; //开启定时器1
  14   1         ES = 1;  //开串口中断
  15   1         EA = 1;  // 开总中断
  16   1         busy[1] = 0;
  17   1      }
  18          
  19          //UART1中断
  20          void UartIsr() interrupt 4
  21          {
  22   1         u8 res;
  23   1      
  24   1         if (SCON & 0x02)
  25   1         {
  26   2            SCON &= ~0x02; // UART1_CLEAR_TX_FLAG;
  27   2            busy[1] = 0;
  28   2         }
  29   1         if (SCON & 0x01)
  30   1         {
  31   2            SCON &= ~0x01; //  UART1_CLEAR_RX_FLAG;
  32   2      
  33   2            res = SBUF;
  34   2         }
  35   1      }
  36          void Timer0_init() //定时器中断0初始化
  37          {
  38   1         TMOD |= 0x00;
  39   1         //AUXR|=0x80; //开启1T模式
  40   1         TL0 = 0x30; //定时器1ms
  41   1         TH0 = 0xf8;
  42   1         TR0 = 1;
  43   1         ET0 = 1;
  44   1         EA = 1;
  45   1      }
  46          
  47          void speed_count_init() //设定T3T4计数器读取编码器的值
  48          {
  49   1         T3L = 0x00;
  50   1         T3H = 0x00;
  51   1      
  52   1         T4L = 0x00;
C51 COMPILER V9.53.0.0   TIMER                                                             07/22/2020 03:02:18 PAGE 2   

  53   1         T4H = 0x00;
  54   1      
  55   1         IE2 = 0x60;
  56   1         T4T3M = 0xcc;
  57   1      }
  58          
  59          float GetCarSpeed(int dat)
  60          {
  61   1         float speed;
  62   1         speed = (float)dat;
  63   1         speed = speed / 16 * 0.049 * 3.14;
  64   1         speed = speed * 200;
  65   1         return speed;
  66   1      }
  67          
  68          extern int dat1, dat2;
  69          void time0_itp() interrupt 1 //定时器0中断服务函数
  70          {
  71   1         static int cnt = 0; //设置计数 到5读取计数器计数值
  72   1         if (cnt >= 5)
  73   1         {
  74   2            cnt = 0;
  75   2            dat1 = (int)(T3H << 8);
  76   2            dat1 = dat1 | (int)T3L;
  77   2            dat2 = (int)(T4H << 8);
  78   2            dat2 = dat2 | (int)T4L;
  79   2            T4T3M = 0x44;
  80   2            T3H = 0;
  81   2            T3L = 0;
  82   2            T4H = 0;
  83   2            T4L = 0;
  84   2            T4T3M = 0xCC;
  85   2         }
  86   1         cnt++;
  87   1      }
  88          void uart_int(void) interrupt 4 using 1
  89          {
  90   1         if (RI)
  91   1         {
  92   2            uart_get_data();
  93   2            RI = 0;
  94   2         }
  95   1      }
  96          void TM3() interrupt 19 //下面俩个都是计数器的中断服务函数，但是计数器不可能计满所以没用
  97          {
  98   1         //LED = !LED;
  99   1         AUXINTIF &= ~T3IF;
 100   1      }
 101          
 102          void TM4() interrupt 20
 103          {
 104   1         //LED = !LED;
 105   1         AUXINTIF &= ~T4IF;
 106   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    447    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      9       7
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V9.53.0.0   TIMER                                                             07/22/2020 03:02:18 PAGE 3   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
