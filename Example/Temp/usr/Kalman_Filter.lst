C51 COMPILER V9.60.0.0   KALMAN_FILTER                                                     07/22/2020 15:40:43 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE KALMAN_FILTER
OBJECT MODULE PLACED IN .\Kalman_Filter.obj
COMPILER INVOKED BY: D:\keil\C51\BIN\C51.EXE ..\hardware\Mpu6050\Kalman_Filter.c LARGE OMF2 OPTIMIZE(2,SPEED) BROWSE INC
                    -DIR(..\hardware\delay;..\hardware\IIC;..\hardware\OLED;..\hardware\ADC;..\hardware\Mpu6050;..\hardware\KEY;..\hardware\L
                    -ED;..\hardware\PWM;..\hardware\pca;..\hardware\timer;..\hardware\PID;..\hardware\CCD;..\hardware\UART) DEBUG PRINT(.\Kal
                    -man_Filter.lst) TABS(2) OBJECT(.\Kalman_Filter.obj)

line level    source

   1          #include "Kalman_Filter.h"
   2          #include "SEEKFREE_MPU6050.h"
   3          
   4          extern int mpu_gyro_x, mpu_gyro_y, mpu_gyro_z;
   5          extern int mpu_acc_x, mpu_acc_y, mpu_acc_z;
   6          
   7          float Angle = 0; //????????
   8          float Gyro_y = 0;
   9          
  10          float Q_angle = 0.01;
  11          float Q_gyro = 0.001;
  12          float R_angle = 0.035;
  13          float dt = 0.028; //dt?kalman???????;
  14          char C_0 = 1;
  15          float Q_bias = 0, Angle_err;
  16          float PCt_0, PCt_1, E;
  17          float K_0, K_1, t_0, t_1;
  18          float Pdot[4] = {0, 0, 0, 0};
  19          float PP[2][2] = {{1, 0}, {0, 1}};
  20          
  21          float Kalman_Filter(float Accel, float Gyro) //¿¨¶ûÂüÂË²¨
  22          {
  23   1      
  24   1         Angle += (Gyro - Q_bias) * dt; //????
  25   1      
  26   1         Pdot[0] = Q_angle - PP[0][1] - PP[1][0]; // Pk-????????????
  27   1      
  28   1         Pdot[1] = -PP[1][1];
  29   1         Pdot[2] = -PP[1][1];
  30   1         Pdot[3] = Q_gyro;
  31   1      
  32   1         PP[0][0] += Pdot[0] * dt; // Pk-??????????????
  33   1         PP[0][1] += Pdot[1] * dt; // =?????????
  34   1         PP[1][0] += Pdot[2] * dt;
  35   1         PP[1][1] += Pdot[3] * dt;
  36   1      
  37   1         Angle_err = Accel - Angle;
  38   1         //zk-????
  39   1      
  40   1         PCt_0 = C_0 * PP[0][0];
  41   1         PCt_1 = C_0 * PP[1][0];
  42   1      
  43   1         E = R_angle + C_0 * PCt_0;
  44   1      
  45   1         K_0 = PCt_0 / E;
  46   1         K_1 = PCt_1 / E;
  47   1      
  48   1         t_0 = PCt_0;
  49   1         t_1 = C_0 * PP[0][1];
  50   1      
  51   1         PP[0][0] -= K_0 * t_0;
  52   1         //?????????
C51 COMPILER V9.60.0.0   KALMAN_FILTER                                                     07/22/2020 15:40:43 PAGE 2   

  53   1         PP[0][1] -= K_0 * t_1;
  54   1         PP[1][0] -= K_1 * t_0;
  55   1         PP[1][1] -= K_1 * t_1;
  56   1      
  57   1         Angle += K_0 * Angle_err;
  58   1         //????
  59   1         Q_bias += K_1 * Angle_err; //????
  60   1         Gyro_y = Gyro - Q_bias;
  61   1         //???(????)???=???
  62   1         return Angle;
  63   1      }
  64          
  65          float GetAngle(void)
  66          {
  67   1         float angleAx, gyroGy;
  68   1         float Angle;
  69   1      
  70   1         mpu6050_get_accdata();
  71   1         mpu6050_get_gyro();
  72   1         angleAx = atan2(mpu_acc_x, mpu_acc_z) * 180 / 3.14;
  73   1         gyroGy = (-mpu_gyro_y) / 16.40;
  74   1         Angle = Kalman_Filter(angleAx, gyroGy);
  75   1      
  76   1         return Angle;
  77   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1522    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     93      20
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
