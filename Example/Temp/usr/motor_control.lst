C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     08/05/2020 05:34:47 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MOTOR_CONTROL
OBJECT MODULE PLACED IN .\motor_control.obj
COMPILER INVOKED BY: D:\keil\C51\BIN\C51.EXE ..\hardware\Motor\motor_control.c LARGE OMF2 OPTIMIZE(2,SPEED) BROWSE INCDI
                    -R(..\hardware\delay;..\hardware\IIC;..\hardware\OLED;..\hardware\ADC;..\hardware\Mpu6050;..\hardware\KEY;..\hardware\LED
                    -;..\hardware\PWM;..\hardware\pca;..\hardware\timer;..\hardware\PID;..\hardware\CCD;..\hardware\UART;..\hardware\Motor) D
                    -EBUG PRINT(.\motor_control.lst) TABS(2) OBJECT(.\motor_control.obj)

line level    source

   1          #include "motor_control.h"
   2          
   3          extern struct P_pid pid_angle,pid_speed,pid_turn;
   4          extern float Turn[5][4];
   5          float set_angle = 45,tangle=0;
   6          
   7          extern int mpu_gyro_y ,mpu_gyro_z;
   8          extern int Encoder_Left,Encoder_Right;
   9          int sudu=0;
  10          int Flag_Left,Flag_Right;
  11          int  Moto1,Moto2;
  12          
  13          int set_speed=1200;
  14          float last_Velocity;
  15          int Balance_Pwm=0,Velocity_Pwm=0,last_Velocity_Pwm=0,Turn_Pwm=0;
  16          float 
  17          Direct_Parameter = 0,// ×ªÏòÏµÊý
  18            Direct_Last = 0,
  19            Radius = 0;   // Ä¿±ê×ªÏò°ë¾¶µ¹Êý
  20          
  21          
  22          int velocityPWM=0;
  23          char SpeedControlPeriod = 0;
  24          float Ratio1=0,Ratio2=0;
  25          void stand()
  26          {
  27   1         char test[30];
  28   1        int Vel_Pwm=0; float a1=0;
  29   1        static int ff = 0,cn=0;
  30   1        
  31   1      //      int dat11 = 0,dat22 =0;
  32   1      
  33   1      //    dat11 = (int)(T3H << 8);
  34   1      //    dat11 = dat11 | (int)T3L;
  35   1      //    dat22 = (int)(T4H << 8);
  36   1      //    dat22 = dat22 | (int)T4L;
  37   1      //    T4T3M = 0x44;
  38   1      //    T3H = 0;
  39   1      //    T3L = 0;
  40   1      //    T4H = 0;
  41   1      //    T4L = 0;
  42   1      //    T4T3M = 0xCC;
  43   1      //    
  44   1      //    if (P42 ==0 && P41 == 1)
  45   1      //    {
  46   1      //      Encoder_Right = dat11;
  47   1      //      Encoder_Left = dat22;
  48   1      //    }
  49   1      //    if (P42 ==1 && P41 == 0)
  50   1      //    {
  51   1      //      Encoder_Right = -dat11;
  52   1      //      Encoder_Left = -dat22;
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     08/05/2020 05:34:47 PAGE 2   

  53   1      //    }
  54   1        
  55   1        tangle = GetAngle();
  56   1            h1 = adc_once(ADC_P00, ADC_12BIT);
  57   1            h2 = adc_once(ADC_P01, ADC_12BIT);
  58   1            h3= adc_once(ADC_P02, ADC_12BIT);
  59   1            h4= adc_once(ADC_P03, ADC_12BIT);
  60   1            h5= adc_once(ADC_P10, ADC_12BIT);
  61   1      
  62   1            dcc=(float)(h1-h5)/(h1+h3+h5)*100;
  63   1            
  64   1      //   sprintf(test,"%d %d %d %.2f\r\n",h1,h3,h5,dcc);
  65   1      //   uart_putstr(test);
  66   1        
  67   1        
  68   1          SpeedControlOutput();
  69   1          Balance_Pwm =balance(tangle,mpu_gyro_y,&pid_angle);       
  70   1          
  71   1          //Radius = -PlacePID_Control(&Turn_PID, Turn[Fre], Middle_Err, 0);//¶¯Ì¬PID£¬¶¯Ì¬·¶Î§0-0.04 £¬´óÎó²îÊ±Æð
             -×÷ÓÃ£¬
  72   1          //Direct_Parameter = -PID_Realize(&Turn_gyro_PID, Turn_gyro, (int32)(mpu_gyro_z),Radius*Speed_Min); // ×
             -ªÏò»·×óÕýÓÒ¸º
  73   1          
  74   1      //    Direct_Parameter = -PID_Realize(&Turn_gyro_PID, Turn_gyro, (int32)(mpu_gyro_z),40); // ×ªÏò»·×óÕýÓÒ¸º
  75   1      //    Direct_Parameter = range_protect(Direct_Parameter, -800, 800);
  76   1        
  77   1      //    Turn_Pwm  =turn(Encoder_Left,Encoder_Right,mpu_gyro_z,&pid_turn,Turn[0]);     
  78   1          if (dcc>20.0 || dcc<-20.0)
  79   1          {
  80   2            Turn_Pwm  = (int)(dcc *Turn[0][0]+Turn[0][1]*mpu_gyro_z); 
  81   2          }
  82   1          else
  83   1          {
  84   2            Turn_Pwm  = (int)(dcc *Turn[1][0]+Turn[1][1]*mpu_gyro_z);
  85   2          }
  86   1          
  87   1          if (dcc<-20 || dcc>20)
  88   1          {
  89   2            cn = 0;
  90   2            ff++;
  91   2            if (ff == 10)
  92   2            {
  93   3              set_speed=1800;
  94   3              ff = 0; 
  95   3            }
  96   2              
  97   2          }
  98   1          if(dcc>-20 || dcc<20)
  99   1          {
 100   2            if(cn == 20)
 101   2            {
 102   3              set_speed=1600;
 103   3              cn = 0;
 104   3            }
 105   2              cn++;
 106   2          }
 107   1        if (Turn_Pwm<-450)
 108   1        {
 109   2          Turn_Pwm = -450;
 110   2        }
 111   1        if(Turn_Pwm>450)
 112   1        {
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     08/05/2020 05:34:47 PAGE 3   

 113   2          Turn_Pwm =450;
 114   2        }
 115   1      //    sprintf(test,"%d %.2f %.2f\r\n",Turn_Pwm,dcc,Turn[0][0]);
 116   1      //    uart_putstr(test);
 117   1      
 118   1      //    Moto1=Balance_Pwm+Velocity_Pwm-Turn_Pwm;                 
 119   1      //    Moto2=Balance_Pwm+Velocity_Pwm+Turn_Pwm;  
 120   1      //    sprintf(test,"%d %d\r\n",Moto1, Moto2);
 121   1      //    uart_putstr(test);      
 122   1      
 123   1      //    Moto1=Balance_Pwm;//+velocityPWM-Turn_Pwm;                 
 124   1      //    Moto2=Balance_Pwm;//+velocityPWM+Turn_Pwm; 
 125   1          Moto1=Balance_Pwm-Turn_Pwm;                 
 126   1          Moto2=Balance_Pwm+Turn_Pwm;  
 127   1          
 128   1      }
*** WARNING C280 IN LINE 27 OF ..\hardware\Motor\motor_control.c: 'test': unreferenced local variable
 129          
 130          void SpeedControlOutput(void) //ËÙ¶ÈÆ½»¬Êä³öº¯Êý
 131          {
 132   1          float fValue;
 133   1        
 134   1          fValue = Velocity_Pwm -last_Velocity_Pwm;
 135   1          velocityPWM = fValue * (SpeedControlPeriod + 1)/9 + last_Velocity_Pwm;
 136   1          SpeedControlPeriod++;
 137   1      }
 138          
 139          void SpeedControl(int sspeed)
 140          {
 141   1          int dat11 = 0,dat22 =0;
 142   1         char test[20];
 143   1          dat11 = (int)(T3H << 8);
 144   1          dat11 = dat11 | (int)T3L;
 145   1          dat22 = (int)(T4H << 8);
 146   1          dat22 = dat22 | (int)T4L;
 147   1          T4T3M = 0x44;
 148   1          T3H = 0;
 149   1          T3L = 0;
 150   1          T4H = 0;
 151   1          T4L = 0;
 152   1          T4T3M = 0xCC;
 153   1          
 154   1          if (P42 ==0 && P41 == 1)
 155   1          {
 156   2            Encoder_Right = dat11;
 157   2            Encoder_Left = dat22;
 158   2          }
 159   1          if (P42 ==1 && P41 == 0)
 160   1          {
 161   2            Encoder_Right = -dat11;
 162   2            Encoder_Left = -dat22;
 163   2          }
 164   1      //   sprintf(test,"%d %d\r\n",Encoder_Right,Encoder_Left);
 165   1      //   uart_putstr(test);
 166   1          
 167   1          last_Velocity_Pwm=Velocity_Pwm;
 168   1          Velocity_Pwm=velocity(Encoder_Left,Encoder_Right,&pid_speed,sspeed);  
 169   1          
 170   1      //       sprintf(test,"%d \r\n",Velocity_Pwm);
 171   1      //  uart_putstr(test);
 172   1          
 173   1      }
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     08/05/2020 05:34:47 PAGE 4   

*** WARNING C280 IN LINE 142 OF ..\hardware\Motor\motor_control.c: 'test': unreferenced local variable
 174            
 175          
 176          int balance(float Angle,float Gyro,struct P_pid *pid)
 177          {  
 178   1         float Bias;
 179   1         int balance;
 180   1         Bias=Angle-set_angle;             
 181   1         balance=pid->Kp*(Bias+(int)(velocityPWM/500))+Gyro*pid->Kd; //velocityPWM Velocity_Pwm
 182   1        if(balance > 1300)
 183   1          {
 184   2            balance = 1300;
 185   2          }     
 186   1          else if (balance<-1300)
 187   1          {
 188   2            balance = -1300;
 189   2          }  
 190   1         return balance;
 191   1      }
 192          
 193          
 194          
 195          extern char jifenflag;
 196          int velocity(int encoder_left,int encoder_right, struct P_pid *pid,int speed)
 197          {  
 198   1          static float Velocity,Encoder_Least,Encoder,last_Encoder,Movement=0; 
 199   1          static float Encoder_Integral;
 200   1      
 201   1          Encoder_Least =(encoder_left+encoder_right)-speed;   
 202   1          Encoder *= 0.75;                                  
 203   1          Encoder += Encoder_Least*0.25;                 
 204   1          Encoder_Integral +=Encoder;                                  
 205   1                     
 206   1          if(Encoder_Integral>12000)    Encoder_Integral=12000;        
 207   1          if(Encoder_Integral<-12000) Encoder_Integral=-12000;
 208   1          
 209   1          Velocity=Encoder*pid->Kp+Encoder_Integral*pid->Ki; 
 210   1          //Velocity=Encoder*kp+Encoder_Integral*ki + kd * (Encoder - last_Encoder); 
 211   1        
 212   1      //    last_Encoder = Encoder;
 213   1          if(turn_off(tangle)==1)  Encoder_Integral=0;    
 214   1          
 215   1        
 216   1          return Velocity;
 217   1      }
*** WARNING C280 IN LINE 198 OF ..\hardware\Motor\motor_control.c: 'last_Encoder': unreferenced local variable
*** WARNING C280 IN LINE 198 OF ..\hardware\Motor\motor_control.c: 'Movement': unreferenced local variable
 218          
 219          //float Velocity,LastVelocity;
 220          //int velocity(int encoder_left,int encoder_right, struct P_pid *pid,int speed)   //222
 221          //{  
 222          //    static float Real_speed,Encoder_Least,Encoder,Encoder_Bias; 
 223          //    static float Encoder_Integral;
 224          
 225          //    Real_speed = (encoder_left+encoder_right)/2;
 226          //    Encoder_Bias =  ((encoder_left+encoder_right)/2)-speed;
 227          //    Encoder_Integral+=Encoder_Bias;  //¶ÔÆ«²î»ý·Ö
 228          //    //»ý·ÖÏÞ·ù
 229          //    if (Encoder_Integral>100) Encoder_Integral=100;
 230          //    if (Encoder_Integral>100) Encoder_Integral=-100;
 231          //    LastVelocity = Velocity;
 232          //    //pi¿ØÖÆ
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     08/05/2020 05:34:47 PAGE 5   

 233          //    Velocity = pid->Kp*Encoder_Bias+pid->Ki*Encoder_Integral;
 234          //  
 235          //    if(turn_off(tangle)==1)  Encoder_Integral=0;    
 236          //    
 237          //  
 238          //    return Velocity;
 239          //}
 240          
 241          
 242          
 243          
 244          int Flag_sudu = 2;
 245          int turn(int encoder_left,int encoder_right,float gyro,struct P_pid *pid,float *PID)//×ªÏò¿ØÖÆ
 246          {
 247   1          static float Turn_Target,Turn =0 ,Encoder_temp,Turn_Convert=0.9,Turn_Count;
 248   1          float Turn_Amplitude=88/Flag_sudu;     
 249   1         
 250   1          if(1==Flag_Left||1==Flag_Right)                      //ÕâÒ»²¿·ÖÖ÷ÒªÊÇ¸ù¾ÝÐý×ªÇ°µÄËÙ¶Èµ÷ÕûËÙ¶ÈµÄÆðÊ¼ËÙ¶È
             -£¬Ôö¼ÓÐ¡³µµÄÊÊÓ¦ÐÔ
 251   1          {
 252   2            if(++Turn_Count==1)
 253   2            Encoder_temp=myabs(encoder_left+encoder_right);
 254   2            Turn_Convert=50/Encoder_temp;
 255   2            if(Turn_Convert<0.6)Turn_Convert=0.6;
 256   2            if(Turn_Convert>3)Turn_Convert=3;
 257   2          } 
 258   1          else
 259   1          {
 260   2            Turn_Convert=0.9;
 261   2            Turn_Count=0;
 262   2            Encoder_temp=0;
 263   2          }     
 264   1          if(1==Flag_Left)             Turn_Target-=Turn_Convert;
 265   1          else if(1==Flag_Right)       Turn_Target+=Turn_Convert; 
 266   1          else Turn_Target=0;
 267   1        
 268   1          if(Turn_Target>Turn_Amplitude)  Turn_Target=Turn_Amplitude;    //×ªÏòÏÞ·ù
 269   1          if(Turn_Target<-Turn_Amplitude) Turn_Target=-Turn_Amplitude;
 270   1      //    if(Flag_Qian==1||Flag_Hou==1)  Kd=1;        
 271   1      //    else Kd=0;   //×ªÏòµÄÊ±ºòÈ¡ÏûÍÓÂÝÒÇµÄ¾ÀÕý ÓÐµãÄ£ºýPIDµÄË¼Ïë
 272   1        
 273   1            //Turn=-Turn_Target*Kp -gyro*Kd;
 274   1          Turn=-dcc*PID[KP] -gyro*PID[KD];  
 275   1          if(Turn > 400)
 276   1          {
 277   2            Turn = 400;
 278   2          }     
 279   1          else if (Turn<-400)
 280   1          {
 281   2            Turn = -400;
 282   2          }
 283   1          return Turn;
 284   1      }
*** WARNING C280 IN LINE 245 OF ..\hardware\Motor\motor_control.c: 'pid': unreferenced local variable
 285          
 286          
 287          
 288          
 289          
 290          u8 turn_off(float tangle)
 291          { 
 292   1        u8 temp;
C51 COMPILER V9.60.0.0   MOTOR_CONTROL                                                     08/05/2020 05:34:47 PAGE 6   

 293   1        if(tangle <20|| tangle > 78) 
 294   1        { 
 295   2          temp = 1;   
 296   2        }
 297   1        else
 298   1        temp=0;
 299   1        return temp;  
 300   1        
 301   1      }
 302          
 303          int myabs(int a)
 304          {        
 305   1          int temp;
 306   1          if(a<0)  temp=-a;  
 307   1          else temp=a;
 308   1          return temp;
 309   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2866    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    105     119
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  5 WARNING(S),  0 ERROR(S)
