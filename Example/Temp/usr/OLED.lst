C51 COMPILER V9.53.0.0   OLED                                                              06/29/2020 19:17:33 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE OLED
OBJECT MODULE PLACED IN .\OLED.obj
COMPILER INVOKED BY: F:\MDK5\C51\BIN\C51.EXE ..\hardware\OLED\OLED.c LARGE OMF2 OPTIMIZE(2,SPEED) BROWSE INCDIR(..\hardw
                    -are\delay;..\hardware\IIC;..\hardware\OLED;..\hardware\ADC;..\hardware\Mpu6050;..\hardware\KEY;..\hardware\LED) DEBUG PR
                    -INT(.\OLED.lst) TABS(3) OBJECT(.\OLED.obj)

line level    source

   1          #include "oled.h"
   2          #include "oledfont.h"   
   3          #include <stdio.h>
   4          
   5          void Write_IIC_Command(unsigned char IIC_Command)
   6          {
   7   1         IIC_Start();
   8   1         Write_IIC_Byte(0x78);            //Slave address,SA0=0
   9   1         IIC_Wait_Ack();   
  10   1         Write_IIC_Byte(0x00);         //write command
  11   1         IIC_Wait_Ack();   
  12   1         Write_IIC_Byte(IIC_Command); 
  13   1         IIC_Wait_Ack();   
  14   1         IIC_Stop();
  15   1      }
  16          /**********************************************
  17          // IIC Write Data
  18          **********************************************/
  19          void Write_IIC_Data(unsigned char IIC_Data)
  20          {
  21   1         IIC_Start();
  22   1         Write_IIC_Byte(0x78);         //D/C#=0; R/W#=0
  23   1         IIC_Wait_Ack();   
  24   1         Write_IIC_Byte(0x40);         //write data
  25   1         IIC_Wait_Ack();   
  26   1         Write_IIC_Byte(IIC_Data);
  27   1         IIC_Wait_Ack();   
  28   1         IIC_Stop();
  29   1      }
  30          void OLED_WR_Byte(unsigned dat,unsigned cmd)
  31          {
  32   1         if(cmd)
  33   1               {
  34   2      
  35   2         Write_IIC_Data(dat);
  36   2         
  37   2            }
  38   1         else {
  39   2         Write_IIC_Command(dat);
  40   2            
  41   2         }
  42   1      
  43   1      
  44   1      }
  45          
  46          /********************************************
  47          // fill_Picture
  48          ********************************************/
  49          void fill_picture(unsigned char fill_Data)
  50          {
  51   1         unsigned char m,n;
  52   1         for(m=0;m<8;m++)
  53   1         {
C51 COMPILER V9.53.0.0   OLED                                                              06/29/2020 19:17:33 PAGE 2   

  54   2            OLED_WR_Byte(0xb0+m,0);    //page0-page1
  55   2            OLED_WR_Byte(0x00,0);      //low column start address
  56   2            OLED_WR_Byte(0x10,0);      //high column start address
  57   2            for(n=0;n<128;n++)
  58   2               {
  59   3                  OLED_WR_Byte(fill_Data,1);
  60   3               }
  61   2         }
  62   1      }
  63          
  64          
  65          /***********************Delay****************************************/
  66          void Delay_50ms(unsigned int Del_50ms)
  67          {
  68   1         unsigned int m;
  69   1         for(;Del_50ms>0;Del_50ms--)
  70   1            for(m=6245;m>0;m--);
  71   1      }
  72          
  73          void Delay_1ms(unsigned int Del_1ms)
  74          {
  75   1         unsigned char j;
  76   1         while(Del_1ms--)
  77   1         {  
  78   2            for(j=0;j<123;j++);
  79   2         }
  80   1      }
  81          
  82          //坐标设置
  83          
  84             void OLED_Set_Pos(unsigned char x, unsigned char y) 
  85          {  OLED_WR_Byte(0xb0+y,OLED_CMD);
  86   1         OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
  87   1         OLED_WR_Byte((x&0x0f),OLED_CMD); 
  88   1      }       
  89          //开启OLED显示    
  90          void OLED_Display_On(void)
  91          {
  92   1         OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC命令
  93   1         OLED_WR_Byte(0X14,OLED_CMD);  //DCDC ON
  94   1         OLED_WR_Byte(0XAF,OLED_CMD);  //DISPLAY ON
  95   1      }
  96          //关闭OLED显示     
  97          void OLED_Display_Off(void)
  98          {
  99   1         OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC命令
 100   1         OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
 101   1         OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
 102   1      }                  
 103          //清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!   
 104          void OLED_Clear(void)  
 105          {  
 106   1         u8 i,n;         
 107   1         for(i=0;i<8;i++)  
 108   1         {  
 109   2            OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 110   2            OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置―列低地址
 111   2            OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置―列高地址   
 112   2            for(n=0;n<128;n++)OLED_WR_Byte(0,OLED_DATA); 
 113   2         } //更新显示
 114   1      }
 115          void OLED_On(void)  
C51 COMPILER V9.53.0.0   OLED                                                              06/29/2020 19:17:33 PAGE 3   

 116          {  
 117   1         u8 i,n;         
 118   1         for(i=0;i<8;i++)  
 119   1         {  
 120   2            OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 121   2            OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置―列低地址
 122   2            OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置―列高地址   
 123   2            for(n=0;n<128;n++)OLED_WR_Byte(1,OLED_DATA); 
 124   2         } //更新显示
 125   1      }
 126          //在指定位置显示一个字符,包括部分字符
 127          //x:0~127
 128          //y:0~63
 129          //mode:0,反白显示;1,正常显示            
 130          //size:选择字体 16/12 
 131          void OLED_ShowChar(u8 x,u8 y,u8 chr)
 132          {        
 133   1         unsigned char c=0,i=0;  
 134   1            c=chr-' ';//得到偏移后的值       
 135   1            if(x>Max_Column-1){x=0;y=y+2;}
 136   1            OLED_Set_Pos(x,y);
 137   1            for(i=0;i<6;i++)
 138   1            OLED_WR_Byte(F6x8[c][i],OLED_DATA);
 139   1      }
 140          //m^n函数
 141          u32 oled_pow(u8 m,u8 n)
 142          {
 143   1         u32 result=1;   
 144   1         while(n--)result*=m;    
 145   1         return result;
 146   1      }             
 147          //显示2个数字
 148          //x,y :起点坐标    
 149          //len :数字的位数
 150          //size:字体大小
 151          //mode:模式 0,填充模式;1,叠加模式
 152          //num:数值(0~4294967295);          
 153          void OLED_ShowNum(u8 x,u8 y,u32 num,u8 len)
 154          {           
 155   1         u8 t,temp;
 156   1         u8 enshow=0;                     
 157   1         for(t=0;t<len;t++)
 158   1         {
 159   2            temp=(num/oled_pow(10,len-t-1))%10;
 160   2            if(enshow==0&&t<(len-1))
 161   2            {
 162   3               if(temp==0)
 163   3               {
 164   4                  OLED_ShowChar(x+6*t,y,' ');
 165   4                  continue;
 166   4               }else enshow=1; 
 167   3                
 168   3            }
 169   2            OLED_ShowChar(x+6*t,y,temp+'0'); 
 170   2         }
 171   1      } 
 172          
 173          void OLED_Show_float(u8 x,u8 y,float num)
 174          {           
 175   1         char t[10];
 176   1         sprintf(t,"%g",num);
 177   1         OLED_ShowString(x,y,t);
C51 COMPILER V9.53.0.0   OLED                                                              06/29/2020 19:17:33 PAGE 4   

 178   1      } 
 179          
 180          //显示一个字符号串
 181          void OLED_ShowString(u8 x,u8 y,u8 *chr)
 182          {
 183   1         unsigned char j=0;
 184   1         while (chr[j]!='\0')
 185   1         {     OLED_ShowChar(x,y,chr[j]);
 186   2               x+=8;
 187   2            if(x>120){x=0;y+=2;}
 188   2               j++;
 189   2         }
 190   1      }
 191          
 192          //初始化SSD1306                   
 193          void OLED_Init(void)
 194          {  
 195   1       
 196   1         OLED_WR_Byte(0xAE,OLED_CMD);//--display off
 197   1         OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 198   1         OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 199   1         OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  
 200   1         OLED_WR_Byte(0xB0,OLED_CMD);//--set page address
 201   1         OLED_WR_Byte(0x81,OLED_CMD); // contract control
 202   1         OLED_WR_Byte(0xFF,OLED_CMD);//--128   
 203   1         OLED_WR_Byte(0xA1,OLED_CMD);//set segment remap 
 204   1         OLED_WR_Byte(0xA6,OLED_CMD);//--normal / reverse
 205   1         OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 206   1         OLED_WR_Byte(0x3F,OLED_CMD);//--1/32 duty
 207   1         OLED_WR_Byte(0xC8,OLED_CMD);//Com scan direction
 208   1         OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset
 209   1         OLED_WR_Byte(0x00,OLED_CMD);//
 210   1         
 211   1         OLED_WR_Byte(0xD5,OLED_CMD);//set osc division
 212   1         OLED_WR_Byte(0x80,OLED_CMD);//
 213   1         
 214   1         OLED_WR_Byte(0xD8,OLED_CMD);//set area color mode off
 215   1         OLED_WR_Byte(0x05,OLED_CMD);//
 216   1         
 217   1         OLED_WR_Byte(0xD9,OLED_CMD);//Set Pre-Charge Period
 218   1         OLED_WR_Byte(0xF1,OLED_CMD);//
 219   1         
 220   1         OLED_WR_Byte(0xDA,OLED_CMD);//set com pin configuartion
 221   1         OLED_WR_Byte(0x12,OLED_CMD);//
 222   1         
 223   1         OLED_WR_Byte(0xDB,OLED_CMD);//set Vcomh
 224   1         OLED_WR_Byte(0x30,OLED_CMD);//
 225   1         
 226   1         OLED_WR_Byte(0x8D,OLED_CMD);//set charge pump enable
 227   1         OLED_WR_Byte(0x14,OLED_CMD);//
 228   1         
 229   1         OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
 230   1         
 231   1         OLED_Clear();
 232   1      }  
 233          
 234          
 235          
 236          
 237          
 238          
 239          
C51 COMPILER V9.53.0.0   OLED                                                              06/29/2020 19:17:33 PAGE 5   

 240          
 241          
 242          
 243          
 244          
 245          
 246          
 247          
 248          
 249          
 250          
 251          
 252          
 253          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1704    ----
   CONSTANT SIZE    =    555    ----
   XDATA SIZE       =   ----      65
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
