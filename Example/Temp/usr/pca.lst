C51 COMPILER V9.53.0.0   PCA                                                               07/21/2020 19:11:44 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE PCA
OBJECT MODULE PLACED IN .\pca.obj
COMPILER INVOKED BY: F:\MDK5\C51\BIN\C51.EXE ..\hardware\pca\pca.c LARGE OMF2 OPTIMIZE(2,SPEED) BROWSE INCDIR(..\hardwar
                    -e\delay;..\hardware\IIC;..\hardware\OLED;..\hardware\ADC;..\hardware\Mpu6050;..\hardware\KEY;..\hardware\LED;..\hardware
                    -\PWM;..\hardware\pca;..\hardware\timer;..\hardware\PID;..\hardware\CCD;..\hardware\UART) DEBUG PRINT(.\pca.lst) TABS(3) 
                    -OBJECT(.\pca.obj)

line level    source

   1          #include "pca.h"
   2          #include "common.h"
   3          
   4          //#include "SEEKFREE_TSL1401.h"
   5          
   6          unsigned long length = 0;
   7          
   8          uint16 ccp_value[4] = {0, 0, 0, 0};
   9          uint16 pca_time_ms[4] = {0, 0, 0, 0};
  10          
  11          //--------------------------------------------------------------------------------------------------------
             ------------
  12          //  @brief      内部使用用户无需关心
  13          //  @param      NULL
  14          //  @return     void
  15          //  Sample usage:               无需用户调用，用户请使用h文件中的宏定义
  16          //--------------------------------------------------------------------------------------------------------
             ------------
  17          /*
  18          void pca_init(PCAN_enum pca_n,PCAMODE_enum pca_mode)
  19          {
  20          
  21             CCON = 0;
  22             CMOD = 0x03<<1;   //ECI 脚的外部输入时钟
  23             
  24             if(PCA_1 == pca_n)
  25             {
  26                switch(pca_mode)
  27                {
  28                   case NONE:
  29                   {
  30                      CCAPM0 = 0x00;
  31                      break;
  32                   }
  33                   case PWM_MODE_N0_ISR:
  34                   {
  35                      CCAPM0 = 0x42;
  36                      break;
  37                   }
  38                   case PWM_MODE_RISING_EDGE_ISR:
  39                   {
  40                      CCAPM0 = 0x63;
  41                      break;
  42                   }
  43                   case PWM_MODE_FALLING_EDGE_ISR:
  44                   {
  45                      CCAPM0 = 0x53;
  46                      break;
  47                   }
  48                   
  49                   case PWM_MODE_BOTH_EDGE_ISR:
  50                   {
C51 COMPILER V9.53.0.0   PCA                                                               07/21/2020 19:11:44 PAGE 2   

  51                      CCAPM0 = 0x73;
  52                      break;
  53                   }
  54                   case RISING_EDGE_CAPTURE:
  55                   {
  56                      CCAPM0 = 0x20;
  57                      break;
  58                   }
  59                   case FALLING_EDGE_CAPTURE:
  60                   {
  61                      CCAPM0 = 0x10;
  62                      break;
  63                   }
  64                   case BOTH_EDGE_CAPTURE:
  65                   {
  66                      CCAPM0 = 0x30;
  67                      break;
  68                   }
  69                   case SOFT_TIMER:
  70                   {
  71                      CCAPM0 = 0x49;
  72                      CR = 1;
  73                      break;
  74                   }     
  75                   case HIGH_SPEED_PULSE_OUTPUT:
  76                   {
  77                      CCAPM0 = 0x4C;
  78                      break;
  79                   }
  80                }
  81             }
  82          }
  83          
  84          
  85          
  86          */
  87          
  88          u32 sys_clk = 22118400;
  89          //--------------------------------------------------------------------------------------------------------
             ------------
  90          //  @brief      周期中断初始化
  91          //  @param      pca_n       pca通道号
  92          //  @param      time        周期中断时间(1ms-45ms)
  93          //  @return     void
  94          //  Sample usage:          pca_init_interrupt_ms(PCA_0, 1); 初始化1ms一次中断
  95          //--------------------------------------------------------------------------------------------------------
             ------------
  96          void pca_init_interrupt_ms(PCAN_enum pca_n, uint16 time_ms)
  97          {
  98   1         uint16 cr_count;
  99   1         CR = 0; // 关闭 PCA 计时器
 100   1         cr_count = (CH << 8) | CL;
 101   1         if (PCA_0 == pca_n)
 102   1         {
 103   2            time_ms = (sys_clk / (12 * (1000 / time_ms)));
 104   2            pca_time_ms[0] = time_ms;
 105   2            CCAPM0 = 0x49;
 106   2            CCAP0L = CL;
 107   2            CCAP0H = CH;
 108   2            ccp_value[0] = ccp_value[0] + pca_time_ms[0] + cr_count;
 109   2         }
 110   1         if (PCA_1 == pca_n)
C51 COMPILER V9.53.0.0   PCA                                                               07/21/2020 19:11:44 PAGE 3   

 111   1         {
 112   2            time_ms = (sys_clk / (12 * (1000 / time_ms)));
 113   2            pca_time_ms[1] = time_ms;
 114   2            CCAPM1 = 0x49;
 115   2            CCAP1L = CL;
 116   2            CCAP1H = CH;
 117   2            ccp_value[1] = ccp_value[1] + pca_time_ms[1] + cr_count;
 118   2         }
 119   1      
 120   1         if (PCA_2 == pca_n)
 121   1         {
 122   2            time_ms = (sys_clk / (12 * (1000 / time_ms)));
 123   2            pca_time_ms[2] = time_ms;
 124   2            CCAPM2 = 0x49;
 125   2            CCAP2L = CL;
 126   2            CCAP2H = CH;
 127   2            ccp_value[2] = ccp_value[2] + pca_time_ms[2] + cr_count;
 128   2         }
 129   1         // PCA_3已做延时
 130   1         // if(PCA_3 == pca_n)
 131   1         // {
 132   1         //    time_ms = (sys_clk/(12*(1000/time_ms)));
 133   1         //    pca_time_ms[3] = time_ms;
 134   1         //    CCAPM3 = 0x49;
 135   1         //    CCAP3L = ccp_value[3];
 136   1         //    CCAP3H = ccp_value[3] >> 8;
 137   1         //    ccp_value[3] += pca_time_ms[3];
 138   1         // }
 139   1         CR = 1; // 启动 PCA 计时器
 140   1      }
 141          
 142          //--------------------------------------------------------------------------------------------------------
             ------------
 143          //  @brief      PCA重载计数器
 144          //  @param      pca_n       pca通道号
 145          //  @return     void
 146          //  Sample usage:          pca_init_interrupt_ms(PCA_0, 1); 初始化1ms一次中断
 147          //--------------------------------------------------------------------------------------------------------
             ------------
 148          void pca_reload_counter(PCAN_enum pca_n)
 149          {
 150   1      
 151   1         if (PCA_0 == pca_n)
 152   1         {
 153   2            //重载计数器
 154   2            CCAP0L = ccp_value[0];
 155   2            CCAP0H = ccp_value[0] >> 8;
 156   2            ccp_value[0] += pca_time_ms[0];
 157   2         }
 158   1      
 159   1         if (PCA_1 == pca_n)
 160   1         {
 161   2            //重载计数器
 162   2            CCAP1L = ccp_value[1];
 163   2            CCAP1H = ccp_value[1] >> 8;
 164   2            ccp_value[1] += pca_time_ms[1];
 165   2         }
 166   1      
 167   1         if (PCA_2 == pca_n)
 168   1         {
 169   2            //重载计数器
 170   2            CCAP2L = ccp_value[2];
C51 COMPILER V9.53.0.0   PCA                                                               07/21/2020 19:11:44 PAGE 4   

 171   2            CCAP2H = ccp_value[2] >> 8;
 172   2            ccp_value[2] += pca_time_ms[2];
 173   2         }
 174   1      
 175   1         if (PCA_3 == pca_n)
 176   1         {
 177   2            //重载计数器
 178   2            CCAP3L = ccp_value[3];
 179   2            CCAP3H = ccp_value[3] >> 8;
 180   2            ccp_value[3] += pca_time_ms[3];
 181   2         }
 182   1      }
 183          
 184          //PCA周期定时器中断
 185          void PCA_Isr() interrupt 7
 186          {
 187   1         if (PCA0_GET_FLAG)
 188   1         {
 189   2            //清除中断标志位
 190   2            PCA_CLEAR_FLAG(PCA_0);
 191   2      
 192   2            //重载计数器
 193   2            pca_reload_counter(PCA_0);
 194   2      
 195   2            //线性CCD采集数据
 196   2            ccd_collect();
*** WARNING C206 IN LINE 196 OF ..\hardware\pca\pca.c: 'ccd_collect': missing function-prototype
 197   2            //采集完成标志位置1
 198   2            tsl1401_finish_flag = 1;
*** ERROR C202 IN LINE 198 OF ..\hardware\pca\pca.c: 'tsl1401_finish_flag': undefined identifier
 199   2         }
 200   1      
 201   1         if (PCA1_GET_FLAG)
 202   1         {
 203   2            //清除中断标志位
 204   2            PCA_CLEAR_FLAG(PCA_1);
 205   2            //重载计数器
 206   2            pca_reload_counter(PCA_1);
 207   2         }
 208   1      
 209   1         if (PCA2_GET_FLAG)
 210   1         {
 211   2            //清除中断标志位
 212   2            PCA_CLEAR_FLAG(PCA_2);
 213   2            //重载计数器
 214   2            pca_reload_counter(PCA_2);
 215   2         }
 216   1      
 217   1         // PCA_3已做延时
 218   1         if (PCA3_GET_FLAG)
 219   1         {
 220   2            //清除中断标志位
 221   2            PCA_CLEAR_FLAG(PCA_3);
 222   2      
 223   2            //重载计数器
 224   2            pca_reload_counter(PCA_3);
 225   2         }
 226   1      }
 227          
 228          void pca_input_init(void) //输入捕获初始化
 229          {
 230   1         CCON = 0x00;
C51 COMPILER V9.53.0.0   PCA                                                               07/21/2020 19:11:44 PAGE 5   

 231   1         CMOD = 0x09;
 232   1         CL = 0x00;
 233   1         CH = 0x00;
 234   1         CCAPM0 = 0x10;
 235   1         CCAP0L = 0x00;
 236   1         CCAP0H = 0x00;
 237   1         CR = 1;
 238   1         EA = 1;
 239   1      }
 240          //
 241          //void Pca_isr() interrupt 7
 242          //{
 243          //   static unsigned char cnt = 0;
 244          //   static unsigned int count0 = 0;
 245          //   static unsigned int count1 = 0;
 246          //   if(CF)
 247          //   {
 248          //      CF = 0;
 249          //      cnt++;
 250          //   }
 251          //   if(CCF0)
 252          //   {
 253          //      CCF0 = 0;
 254          //      count0=count1;
 255          //      count1 = CCAP0H<<8 | CCAP0L;
 256          //      length = 0;
 257          //      length = count1+65536*cnt;
 258          //      CL = 0x00;
 259          //      CH = 0x00;
 260          //      cnt = 0;
 261          //
 262          //      //LED = ~LED;
 263          //   }
 264          //}

C51 COMPILATION COMPLETE.  1 WARNING(S),  1 ERROR(S)
