C51 COMPILER V9.60.0.0   PCA                                                               07/20/2020 03:16:51 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE PCA
OBJECT MODULE PLACED IN .\pca.obj
COMPILER INVOKED BY: D:\keil\C51\BIN\C51.EXE ..\hardware\pca\pca.c LARGE OMF2 OPTIMIZE(2,SPEED) BROWSE INCDIR(..\hardwar
                    -e\delay;..\hardware\IIC;..\hardware\OLED;..\hardware\ADC;..\hardware\Mpu6050;..\hardware\KEY;..\hardware\LED;..\hardware
                    -\PWM;..\hardware\pca;..\hardware\timer;..\hardware\PID;..\hardware\CCD) DEBUG PRINT(.\pca.lst) TABS(2) OBJECT(.\pca.obj)

line level    source

   1          #include "pca.h"
   2          #include "common.h"
   3          
   4          #include "SEEKFREE_TSL1401.h"
   5          
   6          unsigned long length = 0;
   7          
   8          uint16 ccp_value[4] = {0,0,0,0};
   9          uint16 pca_time_ms[4] = {0,0,0,0};
  10          
  11          
  12          //--------------------------------------------------------------------------------------------------------
             ------------
  13          //  @brief      内部使用用户无需关心
  14          //  @param      NULL              
  15          //  @return     void
  16          //  Sample usage:               无需用户调用，用户请使用h文件中的宏定义
  17          //--------------------------------------------------------------------------------------------------------
             ------------
  18          /*
  19          void pca_init(PCAN_enum pca_n,PCAMODE_enum pca_mode)
  20          {
  21          
  22            CCON = 0;
  23            CMOD = 0x03<<1; //ECI 脚的外部输入时钟
  24            
  25            if(PCA_1 == pca_n)
  26            {
  27              switch(pca_mode)
  28              {
  29                case NONE:
  30                {
  31                  CCAPM0 = 0x00;
  32                  break;
  33                }
  34                case PWM_MODE_N0_ISR:
  35                {
  36                  CCAPM0 = 0x42;
  37                  break;
  38                }
  39                case PWM_MODE_RISING_EDGE_ISR:
  40                {
  41                  CCAPM0 = 0x63;
  42                  break;
  43                }
  44                case PWM_MODE_FALLING_EDGE_ISR:
  45                {
  46                  CCAPM0 = 0x53;
  47                  break;
  48                }
  49                
  50                case PWM_MODE_BOTH_EDGE_ISR:
  51                {
C51 COMPILER V9.60.0.0   PCA                                                               07/20/2020 03:16:51 PAGE 2   

  52                  CCAPM0 = 0x73;
  53                  break;
  54                }
  55                case RISING_EDGE_CAPTURE:
  56                {
  57                  CCAPM0 = 0x20;
  58                  break;
  59                }
  60                case FALLING_EDGE_CAPTURE:
  61                {
  62                  CCAPM0 = 0x10;
  63                  break;
  64                }
  65                case BOTH_EDGE_CAPTURE:
  66                {
  67                  CCAPM0 = 0x30;
  68                  break;
  69                }
  70                case SOFT_TIMER:
  71                {
  72                  CCAPM0 = 0x49;
  73                  CR = 1;
  74                  break;
  75                }   
  76                case HIGH_SPEED_PULSE_OUTPUT:
  77                {
  78                  CCAPM0 = 0x4C;
  79                  break;
  80                }
  81              }
  82            }
  83          }
  84          
  85          
  86          
  87          */
  88          
  89          u32 sys_clk = 22118400;
  90          //--------------------------------------------------------------------------------------------------------
             ------------
  91          //  @brief      周期中断初始化
  92          //  @param      pca_n       pca通道号
  93          //  @param      time        周期中断时间(1ms-45ms)
  94          //  @return     void
  95          //  Sample usage:         pca_init_interrupt_ms(PCA_0, 1); 初始化1ms一次中断
  96          //--------------------------------------------------------------------------------------------------------
             ------------
  97          void pca_init_interrupt_ms(PCAN_enum pca_n,uint16 time_ms)
  98          {
  99   1        uint16 cr_count;
 100   1        CR = 0;       // 关闭 PCA 计时器
 101   1        cr_count = (CH<<8) | CL;
 102   1        if(PCA_0 == pca_n)
 103   1        {
 104   2          time_ms = (sys_clk / (12 * (1000 / time_ms)));
 105   2          pca_time_ms[0] = time_ms;
 106   2          CCAPM0 = 0x49;
 107   2          CCAP0L = CL;
 108   2          CCAP0H = CH;
 109   2          ccp_value[0] = ccp_value[0] + pca_time_ms[0] + cr_count;
 110   2        }
 111   1        if(PCA_1 == pca_n)
C51 COMPILER V9.60.0.0   PCA                                                               07/20/2020 03:16:51 PAGE 3   

 112   1        {
 113   2          time_ms = (sys_clk / (12 * (1000 / time_ms)));
 114   2          pca_time_ms[1] = time_ms;
 115   2          CCAPM1 = 0x49;
 116   2          CCAP1L = CL;
 117   2          CCAP1H = CH;
 118   2          ccp_value[1] = ccp_value[1] + pca_time_ms[1] + cr_count;
 119   2        }
 120   1      
 121   1        if(PCA_2 == pca_n)  
 122   1        {
 123   2          time_ms = (sys_clk/(12*(1000/time_ms)));
 124   2          pca_time_ms[2] = time_ms;
 125   2          CCAPM2 = 0x49;
 126   2          CCAP2L = CL;
 127   2          CCAP2H = CH;
 128   2          ccp_value[2] = ccp_value[2] + pca_time_ms[2] + cr_count;
 129   2        }
 130   1      //  PCA_3已做延时
 131   1      //  if(PCA_3 == pca_n)  
 132   1      //  {
 133   1      //    time_ms = (sys_clk/(12*(1000/time_ms)));
 134   1      //    pca_time_ms[3] = time_ms;
 135   1      //    CCAPM3 = 0x49;
 136   1      //    CCAP3L = ccp_value[3];
 137   1      //    CCAP3H = ccp_value[3] >> 8;
 138   1      //    ccp_value[3] += pca_time_ms[3];
 139   1      //  }
 140   1        CR = 1;       // 启动 PCA 计时器
 141   1      }
 142          
 143          
 144          //--------------------------------------------------------------------------------------------------------
             ------------
 145          //  @brief      PCA重载计数器
 146          //  @param      pca_n       pca通道号
 147          //  @return     void
 148          //  Sample usage:         pca_init_interrupt_ms(PCA_0, 1); 初始化1ms一次中断
 149          //--------------------------------------------------------------------------------------------------------
             ------------
 150          void pca_reload_counter(PCAN_enum pca_n)
 151          {
 152   1        
 153   1        if(PCA_0 == pca_n)
 154   1        {
 155   2          //重载计数器
 156   2          CCAP0L = ccp_value[0];
 157   2          CCAP0H = ccp_value[0] >> 8;
 158   2          ccp_value[0] += pca_time_ms[0];
 159   2        }
 160   1      
 161   1        if(PCA_1 == pca_n)
 162   1        {
 163   2          //重载计数器
 164   2          CCAP1L = ccp_value[1];
 165   2          CCAP1H = ccp_value[1] >> 8;
 166   2          ccp_value[1] += pca_time_ms[1];
 167   2        }
 168   1        
 169   1        
 170   1        if(PCA_2 == pca_n)
 171   1        {
C51 COMPILER V9.60.0.0   PCA                                                               07/20/2020 03:16:51 PAGE 4   

 172   2          //重载计数器
 173   2          CCAP2L = ccp_value[2];
 174   2          CCAP2H = ccp_value[2] >> 8;
 175   2          ccp_value[2] += pca_time_ms[2];
 176   2        }
 177   1        
 178   1        
 179   1        if(PCA_3 == pca_n)
 180   1        {
 181   2          //重载计数器
 182   2          CCAP3L = ccp_value[3];
 183   2          CCAP3H = ccp_value[3] >> 8;
 184   2          ccp_value[3] += pca_time_ms[3];
 185   2        }
 186   1      }
 187          
 188          
 189          //PCA周期定时器中断
 190          void PCA_Isr() interrupt 7
 191          {
 192   1        if(PCA0_GET_FLAG)
 193   1        {
 194   2          //清除中断标志位
 195   2          PCA_CLEAR_FLAG(PCA_0);  
 196   2      
 197   2          //重载计数器
 198   2          pca_reload_counter(PCA_0);
 199   2          
 200   2          //线性CCD采集数据
 201   2          ccd_collect();
 202   2          //采集完成标志位置1
 203   2          tsl1401_finish_flag = 1;
 204   2          
 205   2        }
 206   1        
 207   1        if(PCA1_GET_FLAG)
 208   1        {
 209   2          //清除中断标志位
 210   2          PCA_CLEAR_FLAG(PCA_1);  
 211   2          //重载计数器
 212   2          pca_reload_counter(PCA_1);
 213   2        }
 214   1        
 215   1      
 216   1        if(PCA2_GET_FLAG)
 217   1        {
 218   2          //清除中断标志位
 219   2          PCA_CLEAR_FLAG(PCA_2);  
 220   2          //重载计数器
 221   2          pca_reload_counter(PCA_2);
 222   2        }
 223   1        
 224   1      //  PCA_3已做延时
 225   1        if(PCA3_GET_FLAG)
 226   1        {
 227   2          //清除中断标志位
 228   2          PCA_CLEAR_FLAG(PCA_3);  
 229   2          
 230   2          //重载计数器
 231   2          pca_reload_counter(PCA_3);
 232   2        }
 233   1      }
C51 COMPILER V9.60.0.0   PCA                                                               07/20/2020 03:16:51 PAGE 5   

 234          
 235          void pca_input_init(void)  //输入捕获初始化
 236          {
 237   1         CCON = 0x00;
 238   1         CMOD = 0x09;
 239   1         CL = 0x00;
 240   1         CH = 0x00;
 241   1         CCAPM0 = 0x10;
 242   1         CCAP0L = 0x00;
 243   1         CCAP0H = 0x00;
 244   1         CR = 1;
 245   1         EA = 1;
 246   1      }
 247          //       
 248          //void Pca_isr() interrupt 7
 249          //{
 250          //   static unsigned char cnt = 0;
 251          //   static unsigned int count0 = 0;
 252          //   static unsigned int count1 = 0;
 253          //   if(CF)
 254          //   {
 255          //      CF = 0;
 256          //      cnt++;
 257          //   }
 258          //   if(CCF0)
 259          //   {
 260          //      CCF0 = 0;
 261          //      count0=count1;
 262          //      count1 = CCAP0H<<8 | CCAP0L;
 263          //      length = 0;
 264          //      length = count1+65536*cnt;
 265          //      CL = 0x00;
 266          //      CH = 0x00;
 267          //      cnt = 0;
 268          //      
 269          //      //LED = ~LED;
 270          //   }
 271          //}
 272          
 273          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    820    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     24       6
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
