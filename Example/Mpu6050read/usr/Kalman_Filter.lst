C51 COMPILER V9.53.0.0   KALMAN_FILTER                                                     07/21/2020 01:50:45 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE KALMAN_FILTER
OBJECT MODULE PLACED IN .\Kalman_Filter.obj
COMPILER INVOKED BY: F:\MDK5\C51\BIN\C51.EXE ..\hardware\Mpu6050\Kalman_Filter.c LARGE OMF2 OPTIMIZE(2,SPEED) BROWSE INC
                    -DIR(..\hardware\delay;..\hardware\IIC;..\hardware\OLED;..\hardware\ADC;..\hardware\Mpu6050;..\hardware\KEY;..\hardware\L
                    -ED) DEBUG PRINT(.\Kalman_Filter.lst) TABS(3) OBJECT(.\Kalman_Filter.obj)

line level    source

   1          #include "Kalman_Filter.h"
   2          
   3          
   4          float Angle = 0;         //????????  
   5          float Gyro_y = 0;
   6          
   7          
   8          float Q_angle=0.01;  
   9          float Q_gyro=0.001;
  10          float R_angle=0.035;
  11          float dt=0.028;                     //dt?kalman???????;
  12          char  C_0 = 1;
  13          float Q_bias = 0, Angle_err;
  14          float PCt_0, PCt_1, E;
  15          float K_0, K_1, t_0, t_1;
  16          float Pdot[4] ={0,0,0,0};
  17          float PP[2][2] = { { 1, 0 },{ 0, 1 } };
  18                
  19          float Kalman_Filter(float Accel,float Gyro)    
  20          {  
  21   1       
  22   1      
  23   1         Angle+=(Gyro - Q_bias) * dt; //????  
  24   1           
  25   1         Pdot[0]=Q_angle - PP[0][1] - PP[1][0]; // Pk-????????????  
  26   1           
  27   1         Pdot[1]=- PP[1][1];  
  28   1         Pdot[2]=- PP[1][1];  
  29   1         Pdot[3]=Q_gyro;  
  30   1           
  31   1         PP[0][0] += Pdot[0] * dt;   // Pk-??????????????  
  32   1         PP[0][1] += Pdot[1] * dt;   // =?????????  
  33   1         PP[1][0] += Pdot[2] * dt;  
  34   1         PP[1][1] += Pdot[3] * dt;  
  35   1           
  36   1         Angle_err = Accel - Angle;  
  37   1         //zk-????  
  38   1           
  39   1         PCt_0 = C_0 * PP[0][0];  
  40   1         PCt_1 = C_0 * PP[1][0];  
  41   1           
  42   1         E = R_angle + C_0 * PCt_0;  
  43   1           
  44   1         K_0 = PCt_0 / E;  
  45   1         K_1 = PCt_1 / E;  
  46   1           
  47   1         t_0 = PCt_0;  
  48   1         t_1 = C_0 * PP[0][1];  
  49   1           
  50   1         PP[0][0] -= K_0 * t_0;  
  51   1         //?????????  
  52   1         PP[0][1] -= K_0 * t_1;  
  53   1         PP[1][0] -= K_1 * t_0;  
C51 COMPILER V9.53.0.0   KALMAN_FILTER                                                     07/21/2020 01:50:45 PAGE 2   

  54   1         PP[1][1] -= K_1 * t_1;  
  55   1           
  56   1         Angle += K_0 * Angle_err ;  
  57   1         //????  
  58   1         Q_bias  += K_1 * Angle_err; //????  
  59   1         Gyro_y   = Gyro - Q_bias;  
  60   1         //???(????)???=???  
  61   1         return  Angle;  
  62   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1329    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     93       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
